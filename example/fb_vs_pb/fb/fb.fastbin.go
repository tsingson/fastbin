//
// THIS FILE IS GENERATED BY fastbin
// DO NOT MODIFY BY MANUAL
//
package fb

import "github.com/tsingson/fastbin/binary"

func (this *Test) MarshalBinary() (data []byte, err error) {
	var buf = binary.Buffer{Data: make([]byte, this.BinarySize())}
	this.MarshalWriter(&buf)
	return buf.Data, nil
}
func (this *Test) UnmarshalBinary(data []byte) error {
	this.UnmarshalPacket(data)
	return nil
}
func (this *Test) MarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	this.MarshalWriter(&buf)
}
func (this *Test) UnmarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	this.UnmarshalReader(&buf)
}
func (this *Test) BinarySize() (n int) {
	n = 4
	n += 2 + len(this.Label)
	n += 2
	n += len(this.Reps) * 8
	n += 1
	if this.Optionalgroup != nil {
		n += this.Optionalgroup.BinarySize()
	}
	return n
}
func (this *Test) MarshalWriter(w binary.BinaryWriter) {
	w.WriteUint16LE(uint16(len(this.Label)))
	w.WriteString(this.Label)
	w.WriteUint32LE(uint32(this.Type))
	w.WriteUint16LE(uint16(len(this.Reps)))
	for i0 := 0; i0 < len(this.Reps); i0++ {
		w.WriteUint64LE(uint64((this.Reps[i0])))
	}
	if this.Optionalgroup == nil {
		w.WriteUint8(0)
	} else {
		w.WriteUint8(1)
		this.Optionalgroup.MarshalWriter(w)
	}
}
func (this *Test) UnmarshalReader(r binary.BinaryReader) {
	this.Label = string(r.ReadString(int(r.ReadUint16LE())))
	this.Type = int32(r.ReadUint32LE())
	{
		n := int(r.ReadUint16LE())
		this.Reps = make([]int64, n)
		for i0 := 0; i0 < n; i0++ {
			(this.Reps[i0]) = int64(r.ReadUint64LE())
		}
	}
	if r.ReadUint8() == 1 {
		this.Optionalgroup = new(Test_OptionalGroup)
		this.Optionalgroup.UnmarshalReader(r)
	}
}
func (this *Test_OptionalGroup) MarshalBinary() (data []byte, err error) {
	var buf = binary.Buffer{Data: make([]byte, this.BinarySize())}
	this.MarshalWriter(&buf)
	return buf.Data, nil
}
func (this *Test_OptionalGroup) UnmarshalBinary(data []byte) error {
	this.UnmarshalPacket(data)
	return nil
}
func (this *Test_OptionalGroup) MarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	this.MarshalWriter(&buf)
}
func (this *Test_OptionalGroup) UnmarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	this.UnmarshalReader(&buf)
}
func (this *Test_OptionalGroup) BinarySize() (n int) {

	n += 2 + len(this.RequiredField)
	return n
}
func (this *Test_OptionalGroup) MarshalWriter(w binary.BinaryWriter) {
	w.WriteUint16LE(uint16(len(this.RequiredField)))
	w.WriteString(this.RequiredField)
}
func (this *Test_OptionalGroup) UnmarshalReader(r binary.BinaryReader) {
	this.RequiredField = string(r.ReadString(int(r.ReadUint16LE())))
}
